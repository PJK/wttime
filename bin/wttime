#!/usr/bin/env python3

import click
import sys
import dateutil.tz as tz

from itertools import chain
from datetime import datetime
from wttime.parser import Parser
from wttime.cli import CLI
from typing import Optional, List


@click.command()
@click.option('--confidence',
              '-c',
              is_flag=True,
              show_default=True,
              help='Show the confidence level of the chosen interpretation.')
@click.option('--utc/--no-utc',
              '-s/-ns',
              default=True,
              show_default=True,
              help='Show the result in UTC.')
@click.option('--local/--no-local',
              '-l/-nl',
              default=False,
              show_default=True,
              help='Show the result the local time zone.')
@click.option('--remote/--no-remote',
              '-r/-nr',
              default=False,
              show_default=True,
              help='Show the result in the time zone specified by '
              '--remote-timezone.')
@click.option('--remote-timezone',
              default='America/Los_Angeles',
              show_default=True,
              help='Supplementary timezone to use for --remote, given in the "tz database" format.')
@click.option('--timezone',
              '-t',
              default=None,
              show_default=True,
              help='Timezone to interpret timestrings that do not have an explicit timezone, '
                   'given in the "tz database" format. Defaults to the local timezone.')
@click.option('--format',
              '-f',
              default='%Y-%m-%d %H:%M:%S (%z)',
              show_default=True,
              help='Datetime format specification in the Python strftime '
              'format (see http://strftime.org/ for reference).')
@click.option('--usec/--no-usec',
              '-u',
              default=False,
              show_default=True,
              help='Show the result as a Unix timestamp in seconds.')
@click.option('--umilli/--no-umilli',
              '-m',
              default=False,
              show_default=True,
              help='Show the result as a Unix timestamp in milliseconds.')
@click.option('--umicro/--no-umicro',
              '-y',
              default=False,
              show_default=True,
              help='Show the result as a Unix timestamp in microseconds.')
@click.option('--label/--no-label',
              '-x/-nx',
              is_flag=True,
              default=True,
              show_default=True,
              help='Print a label in front of each output.')
@click.argument('timespec', nargs=-1)
def parse(confidence: bool, utc: bool, local: bool, remote: bool,
          remote_timezone: str, timezone: Optional[str], format: str,
          usec: bool, umilli: bool, umicro: bool,
          label: bool,
          timespec: List[str]) -> None:
    """Fuzzily parse TIMESPEC and print the result."""

    stdin = sys.stdin if not sys.stdin.isatty() else []
    parser = Parser(datetime.now(tz=tz.tzlocal()),
                    Parser.parse_tz(timezone) if timezone else tz.tzlocal())
    cli = CLI(parser, tz.tzlocal(), confidence, utc, local, remote,
                           Parser.parse_tz(remote_timezone), format, usec, umilli, umicro, label)

    for ts in chain(timespec, stdin):
        cli.parse(ts)


if __name__ == '__main__':
    parse()
